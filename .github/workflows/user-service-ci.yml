name: user-service-ci.yml

on:
  push:
    branches: ["main"]
    paths:
      - 'UserService/**'

  pull_request:
    branches: ["main"]
    paths:
      - 'UserService/**'


jobs:
  build:
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x UserService/gradlew

      - name: Build with Gradle
        run: ./UserService/gradlew -p UserService clean build

      - name: Upload JAR
        uses: actions/upload-artifact@v3
        with:
          name: user-service-jar
          path: UserService/build/libs/*.jar

  docker-push:

    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: development

    steps:
      #  Docker 빌드를 위해 소스 코드 checkout
      - name: Checkout
        uses: actions/checkout@v3

      #  build job에서 생성한 .jar 파일 다운로드
      - name: Download JAR
        uses: actions/download-artifact@v3
        with:
          name: user-service-jar
          path: UserService/build/libs/

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./UserService
          push: true
          #  추적 가능한 커밋 해시로 태그 지정
          tags: moset1/subsite-user-service:${{ github.sha }}

  deploy:

    needs: docker-push
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Deploy to EC2 Server
        # SSH를 통해 원격 서버에 접속하는 액션
        uses: appleboy/ssh-action@v1.0.3
        with:
          # 1. 서버 접속 정보 (GitHub Secrets에서 가져옴)
          host: ${{ secrets.GCP_HOST }}
          username: ${{ secrets.GCP_USERNAME }}
          key: ${{ secrets.GCP_PRIVATE_KEY }}

          # 2. 원격 서버에서 실행할 스크립트
          script: |
            # Docker Hub에서 최신 이미지를 pull
            docker pull moset1/subsite-user-service:${{ github.sha }}
            
            # 기존에 실행 중인 컨테이너가 있다면 중지하고 삭제 (무중단 배포를 위해서는 다른 전략 필요)
            docker stop user-service-container || true
            docker rm user-service-container || true
            
            # 3. docker run 명령어로 컨테이너 실행 및 환경 변수 주입
            docker run -d --name user-service-container -p 8082:8082 \
            -e "CONFIG_SERVER_URI=http://config-server.internal" \
            -e "CONFIG_SERVER_USERNAME=${{ secrets.CONFIG_SERVER_USERNAME }}" \
            -e "CONFIG_SERVER_PASSWORD=${{ secrets.CONFIG_SERVER_PASSWORD }}" \
            -e "EUREKA_SERVER_USERNAME=${{ secrets.EUREKA_SERVER_USERNAME }}" \
            -e "EUREKA_SERVER_PASSWORD=${{ secrets.EUREKA_SERVER_PASSWORD }}" \
            -e "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" \
            -e "SUBSCRIPTION_DATASOURCE_USERNAME=${{ secrets.SUBSCRIPTION_DATASOURCE_USERNAME }}" \
            -e "SUBSCRIPTION_DATASOURCE_PASSWORD=${{ secrets.SUBSCRIPTION_DATASOURCE_PASSWORD }}" \
            -e "SUBSCRIPTION_RABBITMQ_USERNAME=${{ secrets.SUBSCRIPTION_RABBITMQ_USERNAME }}" \
            -e "SUBSCRIPTION_RABBITMQ_PASSWORD=${{ secrets.SUBSCRIPTION_RABBITMQ_PASSWORD }}" \
              moset1/subsite-user-service:${{ github.sha }}